{"componentChunkName":"component---src-templates-post-js","path":"/azure-functions-environment-with-terraform","result":{"data":{"markdownRemark":{"html":"<p>Since starting down the path of Infrastructure as Code I can't spin anything up manually anymore. I need everything defined and committed with the codebase so I can easily spin up, tear down and replicate all my environments easily.</p>\n<p>I've been using Terraform a bit at work and found it quite robust. It's cloud agnostic so it works just as well with Azure as with AWS (and likely some of the other major cloud platforms but I haven't had experience with others). It abstracts away the underlying templates (e.g. Azure Resource Manager and CloudFormation) with a succinct DSL. It keeps track of state and as such can always easily compare between what you've defined and what is actually in your live environment. Recently it's started to provide a great UI through app.terraform.io to keep the remote state as well as create/review/apply plans through the UI. You can stick with the CLI though also.</p>\n<p>As for Azure Functions, these are MicroSoft's Serverless offering akin to AWS Lambda. I've been using them lately for my own project outside of work. Both are great platforms although I'm a bit more familiar with Azure and as a .NET developer it's a little easier in terms of the developer experience.</p>\n<h3>Terraform install</h3>\n<p>This part is very easy. Grab the executable from the website and chuck it in a suitable place like Program Files\\Terraform then add it to your path (Environment Variables). Open a new commandline and see if it runs (it will just spit out the different commands).</p>\n<p><code class=\"language-text\">terraform</code></p>\n<h3>Create Service Principle in Azure and assign role in subscription RBAC</h3>\n<p>I covered this in <a href=\"/terraform-azure-service-principal\">a previous post</a> so follow those steps and then come back here.</p>\n<h3>Add Terraform scripts</h3>\n<p>As mentioned in the service principle post, I usually create an \"environment\" folder at the root of the repository and then perhaps folders for dev, test, prod etc. You might even have folders per cloud provider if you're using multi-cloud resources. Add a <code class=\"language-text\">provider.tf</code> file with the following content.</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">variable<span class=\"token type variable\"> \"client_secret\" </span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">provider<span class=\"token type variable\"> \"azurerm\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"~> 1.36\"</span>\n  <span class=\"token property\">subscription_id</span>             <span class=\"token punctuation\">=</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000000\"</span>\n  <span class=\"token property\">client_id</span>                   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000000\"</span>\n  <span class=\"token property\">client_secret</span>               <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">client_secret</span><span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">tenant_id</span>                   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000000\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>At this point you should be able to initialise Terraform with <code class=\"language-text\">terraform init</code>. You don't need the version setting initially but it's good practice to add it later so the runs are more deterministic across environments.</p>\n<h3>Remote backend</h3>\n<p>Next up I usually configure a remote backend. This is a way to sve and track state changes into a remote repository rather than keeping it locally. Without a remote backend Terraform will create and alter a state file so it can compare changes between runs with what's actually deployed. Unfortunately it can end up with sensitive settings in there (e.g. deployment credentials for an Azure App Service) and when you're in a team you all need access to the state. This is easily solved with a remote backend and Terraform provides it's own which is great. There's a UI showing your workspaces, all your previous runs, any runs waiting to be applied, etc. You can even have pull requests trigger runs and require approvals to go ahead.</p>\n<p>I'll come back to this with another post but for now you can read up on it at <a href=\"https://www.terraform.io/docs/backends/types/remote.html\">Terraform's docs site</a>.</p>\n<p>It might look something like this if you add a <code class=\"language-text\">backend.tf</code> file (by the way the filenames aren't important).</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">terraform</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">backend<span class=\"token type variable\"> \"remote\" </span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">hostname</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"app.terraform.io\"</span>\n    <span class=\"token property\">organization</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"YourOrganizationName\"</span>\n\n    <span class=\"token keyword\">workspaces</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"yourappworkspace-environment-etc\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Resource group</h3>\n<p>It's good practice in Azure to have a resource group as a logical container for your solution's services. Again create a file e.g. <code class=\"language-text\">resource_group.tf</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"azurerm_resource_group\"</span></span> <span class=\"token string\">\"yourapp-functions-rg\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">application_name</span><span class=\"token punctuation\">}</span></span>-<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">environment_shortname</span><span class=\"token punctuation\">}</span></span>-<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">location_shortname</span><span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">location</span> <span class=\"token punctuation\">=</span> var.location\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So the name is made up of variables which you define and in most cases set the values of. We'll come back to this later. I tend to name things by app name + an environment short name like \"dev\" and also the location of the service e.g. \"ae\" for AustraliaEast. The location is the full name used by Azure, e.g. AustraliaEast.</p>\n<h3>App Service Plan</h3>\n<p>Although Functions are Azure's \"Serverless\" offering they actually run within App Service Plans. However Azure give you some flexibility in how you'd like them to run. You can either make use of a new / existing plan where you're paying a set amount for always on resources to run your Functions within there. Or you can use the Consumption model where they will run in some other App Service on demand. This will affect the cost (a set fee vs. as used) but also the resources available. In most cases you'll want the Consumption model as it's more scalable and likely more cost effective unless you've got a well known workload perhaps.</p>\n<p>Create an <code class=\"language-text\">app_service_plan.tf</code> file with something like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"azurerm_app_service_plan\"</span></span> <span class=\"token string\">\"yourapp-functions-asp\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>                <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">application_name</span><span class=\"token punctuation\">}</span></span>-<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">environment_shortname</span><span class=\"token punctuation\">}</span></span>-<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">location_shortname</span><span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">location</span>            <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>azurerm_resource_group<span class=\"token punctuation\">.</span>yourapp-functions-rg<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">resource_group_name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>azurerm_resource_group<span class=\"token punctuation\">.</span>yourapp-functions-rg<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">kind</span>                <span class=\"token punctuation\">=</span> <span class=\"token string\">\"FunctionApp\"</span>\n  <span class=\"token keyword\">sku</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">tier</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Dynamic\"</span>\n    <span class=\"token property\">size</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Y1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So name should be familiar now and you can see in location and resource<em>group</em>name how we can make use of existing resource definitions values (also outputs but I'm not showing that here). The kind and sku define that we want a Functions application and to use the Dynamic (Consumption based) app service \"plan\".</p>\n<h3>Storage Account</h3>\n<p>Although there are a few ways to deploy a Function, I'm most interesting in using a Storage Account as ultimately I'd like to configure them to just run from zip file within the storage account.</p>\n<p>Create a <code class=\"language-text\">storage_account.tf</code> file and fill out as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"azurerm_storage_account\"</span></span> <span class=\"token string\">\"yourapp-functions-sa\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>                     <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">application_name</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">environment_shortname</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">location_shortname</span><span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">resource_group_name</span>      <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>azurerm_resource_group<span class=\"token punctuation\">.</span>yourapp-functions-rg<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">location</span>                 <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>azurerm_resource_group<span class=\"token punctuation\">.</span>yourapp-functions-rg<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">account_tier</span>             <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Standard\"</span>\n  <span class=\"token property\">account_replication_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"LRS\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might change the type for a production app but this is fine for now.</p>\n<h3>Function App</h3>\n<p>Now we get to the most important part, the actual Function App. Below is an example definition in a <code class=\"language-text\">function_app.tf</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"azurerm_function_app\"</span></span> <span class=\"token string\">\"yourapp-functions-fa\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>                      <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">application_name</span><span class=\"token punctuation\">}</span></span>-<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">environment_shortname</span><span class=\"token punctuation\">}</span></span>-<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">location_shortname</span><span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">location</span>                  <span class=\"token punctuation\">=</span> azurerm_resource_group.yourapp-functions-rg.location\n  <span class=\"token property\">resource_group_name</span>       <span class=\"token punctuation\">=</span> azurerm_resource_group.yourapp-functions-rg.name\n  <span class=\"token property\">app_service_plan_id</span>       <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>azurerm_app_service_plan<span class=\"token punctuation\">.</span>yourapp-functions-asp<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">storage_connection_string</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>azurerm_storage_account<span class=\"token punctuation\">.</span>yourapp-functions-sa<span class=\"token punctuation\">.</span>primary_connection_string<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">version</span>                   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"~2\"</span>\n  <span class=\"token property\">https_only</span>                <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token property\">app_settings</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">FUNCTIONS_WORKER_RUNTIME</span>    <span class=\"token punctuation\">=</span> <span class=\"token string\">\"dotnet\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example you can see where we are starting to use outputs such as the App Service Plan ID and Storage Account Connection String for the resources we're creating. Terraform is great at handling these dependencies for you and the order things need to be creating in.</p>\n<p>I'm using the version 2 Functions runtime as well as dotnet. Azure Functions support a whole bunch of languages but I'm most comfortable in this space.</p>\n<p>We haven't defined a cors (Cross Origin Resource Sharing) section but you may chose to if you're using HTTP triggered Functions called from a web app UI perhaps.</p>\n<h3>Variables</h3>\n<p>OK so scattered throughout these files are variables that we need to define. You can put these in another file but I often define them at the start of the provider.tf file as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">variable<span class=\"token type variable\"> \"client_secret\" </span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"application_name\" </span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"location_shortname\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">default</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ae\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"location\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">default</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"AustraliaEast\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"environment_shortname\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">default</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"dev\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">provider<span class=\"token type variable\"> \"azurerm\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"~> 1.36\"</span>\n  ...</code></pre></div>\n<p>As you can see, you can also set defaults. If you don't provide defaults then you'll be prompted for the values when you run <code class=\"language-text\">terraform plan</code> or <code class=\"language-text\">terraform apply</code>.</p>\n<p>Finally I usually have a separate file with these values. I use the convention based <code class=\"language-text\">terraform.auto.tfvars</code> as then Terraform knows where to find them (otherwise you can pass another filename via the commandline).</p>\n<p>This might look like this...</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token property\">application_name</span>        <span class=\"token punctuation\">=</span> <span class=\"token string\">\"yourapp\"</span>\n<span class=\"token property\">location_shortname</span>      <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ae\"</span>\n<span class=\"token property\">location</span>                <span class=\"token punctuation\">=</span> <span class=\"token string\">\"AustraliaEast\"</span>\n<span class=\"token property\">environment_shortname</span>   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"dev\"</span></code></pre></div>\n<p>Notice how client_secret isn't here? You should ensure any sensitive values aren't in your files. Terraform will prompt you when it runs or you can define in your remote backend. You don't want secrets committed in your repo. You can choose to exclude this file but it makes working in a team harder and ultimately the secret is on your machine in plain text.</p>\n<h3>Plan and Apply</h3>\n<p>I always run <code class=\"language-text\">terraform plan</code> first to see what the changes will be whether it's the first run or not. Although apply will also show changes and prompt you to continue, I still prefer this flow. If you're happy, run <code class=\"language-text\">terraform apply</code> and enter 'yes' to create your resources. Have a look in the Azure portal and they should be there awaiting some code to be pushed in a few minutes.</p>","frontmatter":{"date":"October 31, 2019","path":"/azure-functions-environment-with-terraform","title":"Azure Functions environment set-up with Terraform"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}