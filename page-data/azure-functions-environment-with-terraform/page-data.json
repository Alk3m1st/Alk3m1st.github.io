{"componentChunkName":"component---src-templates-post-js","path":"/azure-functions-environment-with-terraform","result":{"data":{"markdownRemark":{"html":"<p>Since starting down the path of Infrastructure as Code I can't spin anything up manually anymore. I need everything defined and committed with the codebase so I can easily spin up, tear down and replicate all my environments easily.</p>\n<p>I've been using Terraform a bit at work and found it quite robust. It's cloud agnostic so it works just as well with Azure as with AWS (and likely some of the other major cloud platforms but I haven't had experience with others). It abstracts away the underlying templates (e.g. Azure Resource Manager and CloudFormation) with a succinct DSL. It keeps track of state and as such can always easily compare between what you've defined and what is actually in your live environment. Recently it's started to provide a great UI through app.terraform.io to keep the remote state as well as create/review/apply plans through the UI. You can stick with the CLI though also.</p>\n<p>As for Azure Functions, these are MicroSoft's Serverless offering akin to AWS Lambda. I've been using them lately for my own project outside of work. Both are great platforms although I'm a bit more familiar with Azure and as a .NET developer it's a little easier in terms of the developer experience.</p>\n<h3>Terraform install</h3>\n<p>This part is very easy. Grab the executable from the website and chuck it in a suitable place like Program Files\\Terraform then add it to your path (Environment Variables). Open a new commandline and see if it runs (it will just spit out the different commands).</p>\n<p><code class=\"language-text\">terraform</code></p>\n<h3>Create Service Principle in Azure and assign role in subscription RBAC</h3>\n<p>I covered this in <a href=\"/terraform-azure-service-principal\">a previous post</a> so follow those steps and then come back here.</p>","frontmatter":{"date":"October 31, 2019","path":"/azure-functions-environment-with-terraform","title":"Azure Functions environment set-up with Terraform"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}